<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Arnab's Universe]]></title>
  <link href="http://arnab-deka.com/posts/categories/programming/atom.xml" rel="self"/>
  <link href="http://arnab-deka.com/"/>
  <updated>2013-01-22T14:57:38+05:30</updated>
  <id>http://arnab-deka.com/</id>
  <author>
    <name><![CDATA[Arnab Deka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs: change fonts dynamically based on screen resolution]]></title>
    <link href="http://arnab-deka.com/posts/2012/09/emacs-change-fonts-dynamically-based-on-screen-resolution/"/>
    <updated>2012-09-23T00:00:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2012/09/emacs-change-fonts-dynamically-based-on-screen-resolution</id>
    <content type="html"><![CDATA[<p>I regularly switch between a <a href="http://www.apple.com/thunderbolt/">Thunderbolt display</a> at home and the <a href="http://www.apple.com/macbook-pro/features/">Mac’s native retina display</a> when I’m in a coffee shop or the like.</p>

<p>It bugs me that I have to adjust emac’s font manually when I switch displays – started “re-using” emacs again last week. So I automated this today:
<div><script src='https://gist.github.com/3774147.js'></script>
<noscript><pre><code>;; Gist-ed from in https://github.com/arnab/emacs-starter-kit

(defun fontify-frame (frame)
  (interactive)
  (if window-system
      (progn
        (if (&gt; (x-display-pixel-width) 2000)
            (set-frame-parameter frame 'font &quot;Inconsolata 19&quot;) ;; Cinema Display
         (set-frame-parameter frame 'font &quot;Inconsolata 16&quot;)))))

;; Fontify current frame
(fontify-frame nil)

;; Fontify any future frames
(push 'fontify-frame after-make-frame-functions)</code></pre></noscript></div>
</p>

<p>You can see all my emacs customizations in Github <a href="https://github.com/arnab/emacs-starter-kit">arnab/emacs-starter-kit</a> repo, which is based on the excellent <a href="http://technomancy.us/153">ESK v2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Allowing and testing CORS requests in Rails
]]></title>
    <link href="http://arnab-deka.com/posts/2012/09/allowing-and-testing-cors-requests-in-rails/"/>
    <updated>2012-09-19T00:00:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2012/09/allowing-and-testing-cors-requests-in-rails</id>
    <content type="html"><![CDATA[<p>I’m currently writing a <code>backbone</code>-based <code>Javascript</code> app that’s going to directly call a <code>REST</code>-style API (implemented with <code>Rails</code> ).</p>

<blockquote><p>CORS (Cross-Origin Resource Sharing) is new technique makes it possible for AJAX requests to directly talk to HTTP-services outside it’s own domain. Read this <a href="http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/" title="Cross Domain AJAX with CORS">awesome primer</a> to read more on CORS.</p></blockquote>

<p>While there are lots of examples that show how to allow CORS requests in Rails (just <a href="http://goo.gl/d8g3j">google</a>), they almost never have tests with them. While it’s simple to test the HTTP headers, you may have to look around a little (or a lot) on how to test a HTTP “OPTIONS” request. When you make CORS requests, the browser may make a pre-flight “OPTIONS” request to verify that the server allows CORS.</p>

<!-- more -->


<p>To make Rails set the right HTTP headers to allow CORS requests, you can do something like this:
<div><script src='https://gist.github.com/3749227.js?file=controller.rb'></script>
<noscript><pre><code>before_filter: allow_cors_requests

def allow_cors
  headers[&quot;Access-Control-Allow-Origin&quot;] = &quot;*&quot;
  headers[&quot;Access-Control-Allow-Methods&quot;] = %w{GET POST PUT DELETE}.join(&quot;,&quot;)
  headers[&quot;Access-Control-Allow-Headers&quot;] = %w{Origin Accept Content-Type X-Requested-With X-CSRF-Token}.join(&quot;,&quot;)
  head(:ok) if request.request_method == &quot;OPTIONS&quot;
  # or, render text: ''
  # if that's more your style
end
</code></pre></noscript></div>
</p>

<p>A few things to note here:</p>

<ol>
<li>You can set the <code>Access-Control-Allow-Origin</code> header to your domain to further restrict it.</li>
<li>While Rails is one place to do this in, you can certainly do this in your webserver (nginx etc.). Again, just google. I prefer things to be more testable – maybe when I see a performance problem, I’d revise this decision (although, performance bottlenecks would probably not be in setting HTTP headers.)</li>
</ol>


<p>Another thing to consider when you allow CORS, is authentication – you should do some HTTP based auth (token auth for example) so only <em>your</em> apps can talk to this service. The thing with JS is, however uglified it is, any developer worth his salt can figure out how to call your backend service after reading your JS by loading your site up in a browser.</p>

<p>In any case, how do you test this? It’s fairly trivial to test that the right HTTP headers were set with something like this:
<div><script src='https://gist.github.com/3749227.js?file=testing_cors_spec.rb'></script>
<noscript><pre><code>response.headers['Access-Control-Allow-Origin'].should == '*'
</code></pre></noscript></div>
</p>

<p>To make a HTTP <code>options</code> request in RSpec, I had to dig through some code. And googling didn’t help here, at least the way I google. Here’s the low-down: RSpec <em>delegates</em> the request methods (like <code>get</code>/<code>post</code>/<code>put</code> etc. in the controller specs) to Rails’ <code>ActionController Tests</code>. All these methods invoke <code>ActionController::TestCase#process</code> with specific args, one of which is the method name. Now Rails master already has support for making “options” requests in tests (thanks to <a href="https://github.com/rails/rails/commit/0303c2325fab253adf5e4a0b738cb469c048f008#L0R438">this commit</a>), but that’s not available in the latest Rails release (3.2.8). I think this would make it’s way into Rails 4. Looking into this commit, we get the idea though: basically we also call the <code>process</code> method with a “OPTIONS” argument for the request-method. Putting it all together, my tests looked something like this:
<div><script src='https://gist.github.com/3749227.js?file=controller_spec.rb'></script>
<noscript><pre><code>shared_examples_for &quot;any request&quot; do
  context &quot;CORS requests&quot; do
    it &quot;should set the Access-Control-Allow-Origin header to allow CORS from anywhere&quot; do
      response.headers['Access-Control-Allow-Origin'].should == '*'
    end

    it &quot;should allow general HTTP methods thru CORS (GET/POST/PUT/DELETE)&quot; do
      allowed_http_methods = response.header['Access-Control-Allow-Methods']
      %w{GET POST PUT DELETE}.each do |method|
        allowed_http_methods.should include(method)
      end
    end

    # etc etc
  end
end

describe &quot;HTTP OPTIONS requests&quot; do
  # With Rails 4 (currently in master) we'll be able to `options :index`
  before(:each) { process :index, nil, nil, nil, 'OPTIONS' }

  it_should_behave_like &quot;any request&quot;

  it &quot;should be succesful&quot; do
    response.should be_success
  end
end

# And similar tests for GET/POST what have you which actually test the functionality...</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick howto on accessing Rails Properties]]></title>
    <link href="http://arnab-deka.com/posts/2011/04/quick-howto-accessing-rails-properties/"/>
    <updated>2011-04-08T00:00:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2011/04/quick-howto-accessing-rails-properties</id>
    <content type="html"><![CDATA[<p>When you create a new Rails app the default static page (public/index.html) page shows a lot of details about the app. Here’s a quick how-to show these details (the idea is to probably show these on a /ping route (or a debug parameter on any page maybe) – so you can quickly monitor your app – it’s state, active_record state etc.).</p>

<!-- more -->


<p><strong>Rails 3</strong>: browse the <a href="https://github.com/rails/rails/blob/v3.0.6/railties/lib/rails/info.rb">source-code at railties/lib/rails/info.rb</a></p>

<p>Or see:
<div><script src='https://gist.github.com/911091.js?file=rails_306_properties.rb'></script>
<noscript><pre><code># see https://github.com/rails/rails/blob/v3.0.6/railties/lib/rails/info.rb

@properties = {
  :ruby =&gt; &quot;#{RUBY_VERSION} (#{RUBY_PLATFORM})&quot;,
  :rubygem =&gt; Gem::RubyGemsVersion,
  :rack =&gt; ::Rack.release,
  :rails =&gt; Rails::VERSION::STRING,
  :app_root =&gt; File.expand_path(Rails.root),
  :env =&gt; Rails.env,
  :db_adapter =&gt; ActiveRecord::Base.configurations[Rails.env]['adapter'],
  :db_schema_version =&gt; (ActiveRecord::Migrator.current_version || nil),
  :middleware =&gt; Rails.configuration.middleware.map(&amp;:inspect),
}
</code></pre></noscript></div>
</p>

<p><strong>Rails 2</strong>: browse the <a href="https://github.com/rails/rails/blob/v2.0.2/railties/builtin/rails_info/rails/info.rb">source-code at railties/builtin/rails_info/rails/info.rb</a></p>

<p>Or see:
<div><script src='https://gist.github.com/911091.js?file=rails_202_properties.rb'></script>
<noscript><pre><code># see https://github.com/rails/rails/blob/v2.0.2/railties/builtin/rails_info/rails/info.rb

@properties = {
  :ruby =&gt; &quot;#{RUBY_VERSION} (#{RUBY_PLATFORM})&quot;,
  :rubygem =&gt; Gem::RubyGemsVersion,
  :rails =&gt; Rails::VERSION::STRING,
  :app_root =&gt; File.expand_path(RAILS_ROOT),
  :env =&gt; RAILS_ENV,
  :db_adapter =&gt; ActiveRecord::Base.configurations[RAILS_ENV]['adapter'],
  :db_schema_version =&gt; (ActiveRecord::Migrator.current_version || nil),
}
</code></pre></noscript></div>
</p>

<p>Till the next time…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Emacs + CL + Clojure + Slime...]]></title>
    <link href="http://arnab-deka.com/posts/2010/12/notes-on-emacs-cl-clojure-slime/"/>
    <updated>2010-12-30T00:00:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2010/12/notes-on-emacs-cl-clojure-slime</id>
    <content type="html"><![CDATA[<p>After a day of struggling finally Emacs+CL+Clojure+Slime setup is working. I noted it all in the <a href="http://www.arnab-deka.com/posts/notes/emacs-setup/">notes section</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick MacBook setup]]></title>
    <link href="http://arnab-deka.com/posts/2010/03/quick-macbook-setup/"/>
    <updated>2010-03-17T00:00:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2010/03/quick-macbook-setup</id>
    <content type="html"><![CDATA[<p>Just put in my notes about setting up a MacBook in <a href="http://www.arnab-deka.com/posts/notes/macbook-setup" title="MacBook setup">the notes section here</a>. I’ll keep updating – please add your thoughts in!</p>
]]></content>
  </entry>
  
</feed>
