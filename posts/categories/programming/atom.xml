<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Arnab's Universe]]></title>
  <link href="http://arnab-deka.com/posts/categories/programming/atom.xml" rel="self"/>
  <link href="http://arnab-deka.com/"/>
  <updated>2013-02-12T12:35:47+05:30</updated>
  <id>http://arnab-deka.com/</id>
  <author>
    <name><![CDATA[Arnab Deka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs: change fonts dynamically based on screen resolution]]></title>
    <link href="http://arnab-deka.com/posts/2012/09/emacs-change-fonts-dynamically-based-on-screen-resolution/"/>
    <updated>2012-09-23T00:00:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2012/09/emacs-change-fonts-dynamically-based-on-screen-resolution</id>
    <content type="html"><![CDATA[<p>I regularly switch between a <a href="http://www.apple.com/thunderbolt/">Thunderbolt display</a> at home and the <a href="http://www.apple.com/macbook-pro/features/">Mac’s native retina display</a> when I’m in a coffee shop or the like.</p>

<p>It bugs me that I have to adjust emac’s font manually when I switch displays – started “re-using” emacs again last week. So I automated this today:</p>

<!-- more -->


<p><div><script src='https://gist.github.com/3774147.js'></script>
<noscript><pre><code>;; Gist-ed from in https://github.com/arnab/emacs-starter-kit

(defun fontify-frame (frame)
  (interactive)
  (if window-system
      (progn
        (if (&gt; (x-display-pixel-width) 2000)
            (set-frame-parameter frame 'font &quot;Inconsolata 19&quot;) ;; Cinema Display
         (set-frame-parameter frame 'font &quot;Inconsolata 16&quot;)))))

;; Fontify current frame
(fontify-frame nil)

;; Fontify any future frames
(push 'fontify-frame after-make-frame-functions)</code></pre></noscript></div>
</p>

<p>You can see all my emacs customizations in Github <a href="https://github.com/arnab/emacs-starter-kit">arnab/emacs-starter-kit</a> repo, which is based on the excellent <a href="http://technomancy.us/153">ESK v2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick howto on accessing Rails Properties]]></title>
    <link href="http://arnab-deka.com/posts/2011/04/quick-howto-accessing-rails-properties/"/>
    <updated>2011-04-08T00:00:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2011/04/quick-howto-accessing-rails-properties</id>
    <content type="html"><![CDATA[<p>When you create a new Rails app the default static page (public/index.html) page shows a lot of details about the app. Here’s a quick how-to show these details (the idea is to probably show these on a /ping route (or a debug parameter on any page maybe) – so you can quickly monitor your app – it’s state, active_record state etc.).</p>

<!-- more -->


<p><strong>Rails 3</strong>: browse the <a href="https://github.com/rails/rails/blob/v3.0.6/railties/lib/rails/info.rb">source-code at railties/lib/rails/info.rb</a></p>

<p>Or see:
<div><script src='https://gist.github.com/911091.js?file=rails_306_properties.rb'></script>
<noscript><pre><code># see https://github.com/rails/rails/blob/v3.0.6/railties/lib/rails/info.rb

@properties = {
  :ruby =&gt; &quot;#{RUBY_VERSION} (#{RUBY_PLATFORM})&quot;,
  :rubygem =&gt; Gem::RubyGemsVersion,
  :rack =&gt; ::Rack.release,
  :rails =&gt; Rails::VERSION::STRING,
  :app_root =&gt; File.expand_path(Rails.root),
  :env =&gt; Rails.env,
  :db_adapter =&gt; ActiveRecord::Base.configurations[Rails.env]['adapter'],
  :db_schema_version =&gt; (ActiveRecord::Migrator.current_version || nil),
  :middleware =&gt; Rails.configuration.middleware.map(&amp;:inspect),
}
</code></pre></noscript></div>
</p>

<p><strong>Rails 2</strong>: browse the <a href="https://github.com/rails/rails/blob/v2.0.2/railties/builtin/rails_info/rails/info.rb">source-code at railties/builtin/rails_info/rails/info.rb</a></p>

<p>Or see:
<div><script src='https://gist.github.com/911091.js?file=rails_202_properties.rb'></script>
<noscript><pre><code># see https://github.com/rails/rails/blob/v2.0.2/railties/builtin/rails_info/rails/info.rb

@properties = {
  :ruby =&gt; &quot;#{RUBY_VERSION} (#{RUBY_PLATFORM})&quot;,
  :rubygem =&gt; Gem::RubyGemsVersion,
  :rails =&gt; Rails::VERSION::STRING,
  :app_root =&gt; File.expand_path(RAILS_ROOT),
  :env =&gt; RAILS_ENV,
  :db_adapter =&gt; ActiveRecord::Base.configurations[RAILS_ENV]['adapter'],
  :db_schema_version =&gt; (ActiveRecord::Migrator.current_version || nil),
}
</code></pre></noscript></div>
</p>

<p>Till the next time…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Emacs + CL + Clojure + Slime...]]></title>
    <link href="http://arnab-deka.com/posts/2010/12/notes-on-emacs-cl-clojure-slime/"/>
    <updated>2010-12-30T00:00:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2010/12/notes-on-emacs-cl-clojure-slime</id>
    <content type="html"><![CDATA[<p>After a day of struggling finally Emacs+CL+Clojure+Slime setup is working. I noted it all in the <a href="http://www.arnab-deka.com/posts/notes/emacs-setup/">notes section</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick MacBook setup]]></title>
    <link href="http://arnab-deka.com/posts/2010/03/quick-macbook-setup/"/>
    <updated>2010-03-17T00:00:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2010/03/quick-macbook-setup</id>
    <content type="html"><![CDATA[<p>Just put in my notes about setting up a MacBook in <a href="http://www.arnab-deka.com/posts/notes/macbook-setup" title="MacBook setup">the notes section here</a>. I’ll keep updating – please add your thoughts in!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing GLPK on a Mac]]></title>
    <link href="http://arnab-deka.com/posts/2010/02/installing-glpk-on-a-mac/"/>
    <updated>2010-02-26T00:00:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2010/02/installing-glpk-on-a-mac</id>
    <content type="html"><![CDATA[<h2>Obsolation note:</h2>

<p>Thanks to <a href="#comment-2787">Dave Coleman’s comment</a> I found out that glpk is available through homebrew now! So you just need these 2 steps to get glpk now:</p>

<ol>
<li><a href="http://mxcl.github.com/homebrew/" title="homebrew">homebrew</a></li>
<li><code>brew install glpk</code></li>
</ol>


<p>If you still want to read on, the old way is still here…</p>

<p>So you want copy-paste instructions to install <a href="http://www.gnu.org/software/glpk">GLPK</a> on your Macbook? Here are the steps:</p>

<ol>
<li>Download the latest version of GLPK from <a href="http://www.gnu.org/software/glpk/#downloading">http://www.gnu.org/software/glpk/#downloading</a></li>
<li><em>Optional:</em> Follow the instructions to verify the download (you might need to get GNU Privacy Guard or gpg for this. You can get it at <a href="http://gnupg.org">http://gnupg.org</a>)</li>
<li><p>Say it’s downloaded to your “Downloads” directory, go there and execute the following commands (using the terminal)</p>

<pre><code>cd ~/Downloads
tar -xzf glpk-4.43.tar.gz
./configure --prefix=/usr/local # see note [1]
make
sudo make install
</code></pre></li>
<li><p>At this point, you should have GLPK installed. Verify it:</p>

<pre><code>which glpsol
/usr/local/bin/glpsol
</code></pre></li>
<li><p>… and try help:</p>

<pre><code>glpsol --help
</code></pre></li>
</ol>


<p>Now that you are all set-up, read up this excellent introduction using GLPK: <a href="http://www.ibm.com/developerworks/linux/library/l-glpk1">http://www.ibm.com/developerworks/linux/library/l-glpk1</a></p>

<p>Notes:</p>

<ul>
<li>HiveLogic article on <a href="http://hivelogic.com/articles/using_usr_local">why using /usr/local is better</a></li>
<li>If you want MySQL support (or something “extra”) check out the INSTALL file in the package</li>
</ul>

]]></content>
  </entry>
  
</feed>
