<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby,rails,test-unit,testing,debugging,obsecure | Arnab's Universe]]></title>
  <link href="http://arnab-deka.com/posts/categories/ruby-rails-test-unit-testing-debugging-obsecure/atom.xml" rel="self"/>
  <link href="http://arnab-deka.com/"/>
  <updated>2013-02-05T15:09:26+05:30</updated>
  <id>http://arnab-deka.com/</id>
  <author>
    <name><![CDATA[Arnab Deka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging warnings in tests]]></title>
    <link href="http://arnab-deka.com/posts/2013/02/debugging-warnings-in-tests/"/>
    <updated>2013-02-05T14:28:00+05:30</updated>
    <id>http://arnab-deka.com/posts/2013/02/debugging-warnings-in-tests</id>
    <content type="html"><![CDATA[<p><code>sh
Object#id will be deprecated; use Object#object_id
</code>
Hate seeing warnings in your test output? Yeah me too. Came across a
fairly weird bug today and this is how I debugged it.</p>

<!--more-->


<p>With a recent checkin I started seeing some warnings in the test
output, like this:
```sh
$ ruby -I "lib:test" path/to/example_controller_test.rb
Loaded suite example_controller_test.rb [app_name] init ...
Started
........../path/to/some/<em>partial.html.erb:48: warning: Object#id will
be deprecated; use Object#object_id
.............../path/to/some/</em>partial.html.erb:48: warning: Object#id
will be deprecated; use Object#object_id
..........................................................................................
Finished in 12.545861 seconds.</p>

<p> 58 tests, 198 assertions, 0 failures, 0 errors
```</p>

<p>If life's easy, you'll see the test files name along with the
warnings. However, in this case, the trace only contains an erb
partial. The partial looked something like this:</p>

<p><code>html
&lt;li&gt;
  &lt;%= @something.try(:id) %&gt;
&lt;/li&gt;
</code></p>

<p>Typically this warning happens when you call <code>#id</code> on an object that
evaluates to <code>nil</code>. In this case, looks like someone already thought
of that - and used
<a href="http://api.rubyonrails.org/classes/Object.html#method-i-try"><code>#try</code></a>
specifically to avoid this warning.</p>

<p>What gives? What complicates this is that our test suite has 1000+
tests and the partial that shows the erorr is used widely. (You could
try deleting the partial and see what fails but in this case 90% of
the tests would fail).</p>

<p>After some more trial and error, I started reading the Test::Unit
source on github. That with some introspection showed that you can get
the running test's name at runtime with the <code>#name</code> method. Duh!</p>

<p>So I added a <code>teardown</code> to the suite:
```rb
class ExampleControllerTest &lt; Test::Unit
  # setup etc.</p>

<p>  def teardown</p>

<pre><code>puts "#{name}\n"
</code></pre>

<p>  end</p>

<p>   test "something should do something" do</p>

<pre><code> get :new
 # assert something
</code></pre>

<p>   end</p>

<p>   # more tests
 end
```</p>

<p>With that, my test suit printed out the name of every test right after
the <code>.</code> - and looking through the output for the warning showed me the
test that was causing it:
<code>sh
/path/to/some/_partial.html.erb:48: warning: Object#id will be
deprecated; use Object#object_id
.test_something_should_do_something(ExampleControllerTest)
</code></p>

<p>This gave me the lead I needed. Now it took some more debugging to
figure out the details (I'll spare you the rest) but it turns out a
method 4-5 levels down was retruning <code>false</code> instead of <code>nil</code>. And
<code>#try</code> works beautifully for <code>nil</code> but not for <code>false</code>:</p>

<p>```rb</p>

<blockquote><blockquote><p>nil.try(:id)
=> nil
false.try(:id)
(irb):9: warning: Object#id will be deprecated; use Object#object_id
=> 0</p>

<p>```</p></blockquote></blockquote>

<p>So there you go. It sure was an entertaining session for me. And if
you read it till here...</p>

<p>More techniques about how I could have debugged this more easily are
most welcome.</p>
]]></content>
  </entry>
  
</feed>
